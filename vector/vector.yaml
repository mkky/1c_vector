#timezone: Europe/Moscow

sources:
  input_logs:
    type: file
    include:
      - /var/log/logtj/**/*.log
    data_dir: /var/lib/vector
    fingerprint:
      strategy: device_and_inode

  lst_file:
    type: file
    include:
      - /var/log/logtj/1CV8Clst.lst
    data_dir: /var/lib/vector
    fingerprint:
      strategy: device_and_inode
    ignore_checkpoints: true

transforms:
  filter_db_lines_in_lst:
    inputs:
      - lst_file
    type: filter
    condition: contains( to_string!(.message), ";DBUID=")

  parse_lst:
    inputs:
      - filter_db_lines_in_lst
    type: remap
    file: /etc/vector/transforms/parseLst.vrl

  remap_logs:
    inputs:
      - input_logs
    type: remap
    file: /etc/vector/transforms/parseLog.vrl

  add_context_event:
    inputs:
      - remap_logs
    type: reduce
    starts_when:
      type: vrl
      source: .name != "Context"


  filter_EVENT_LIST:
    inputs:
      - add_context_event
    type: filter
    condition: includes(split("${EVENT_LIST}", ","), to_string!(.name))

sinks:
  clickhouse:
    type: clickhouse
    inputs:
      - filter_EVENT_LIST
      - parse_lst
    endpoint: ${CLICKHOUSE_SERVER}
    auth:
      strategy: basic
      user: ${CLICKHOUSE_USER}
      password: ${CLICKHOUSE_PASSWORD}
    database: ${CLICKHOUSE_DATABASE}
    skip_unknown_fields: true
    table: "{{ .name }}"
    batch:
      max_events: 10000
      timeout_secs: 5
    acknowledgements:
      enabled: true


 ## Пишем данные, которую фильтруются в БД еще и в json файлы в ./tmp/

  json_log_to_tmp_folder:
    type: file
    inputs:
      - filter_EVENT_LIST
      - parse_lst
    compression: none
    path: /tmp/%Y_%m_%d__%H_%M.json
    encoding:
      codec: json

