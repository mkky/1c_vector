lines=split!(.message, "\n")

events = []
for_each(split!(.message, "\n", 12)) -> |_index, value| {

  server = parse_regex(value, r'\{"(?P<server>[^\s,"]+)",(?P<port>\d+)\},?\r') ?? {}
  if exists(server.server){
    
    prev_value = ""
    msgs = split!(.message, to_string(server.server))
    range_ports_regex = r'\{(?P<range_start>\d+),(?P<range_end>\d+)\}\s'
    for_each(msgs) -> |_i, m| {
        if match(m, range_ports_regex)  {
             #server.prev_value = prev_value
             server = merge(server, .)
             server = merge(server, parse_regex(prev_value , r'",(?P<rport>\d+),"$') ?? {"rport": ""})
             server = merge(server, parse_regex!(m, range_ports_regex))
             server.name="SERVERS"
        }
        prev_value = m
    }
    events = push(events, server)
  }
}

. = events


