.FilePath = to_string(.file) ?? "unknown"
.FileName = replace!(.FilePath, r'.*[\\/]([^\\/]+)$', "$1")

parsed, err = parse_regex(.message, r'\{(?P<DateTimeRaw>\d{14}),(?P<TransactionStatus>\w),\s+\{(?P<TransactionDate>.+?)\},(?P<User>\d+),(?P<Computer>\d+),(?P<Application>\d+),(?P<Connection>\d+),(?P<Event>\d+),(?P<Severity>\w),"(?P<Comment>[\s\S]*?)",(?P<Metadata>\d+),\s+(?P<Data>[\s\S]+?\}),"(?P<DataPresentation>.*?)",(?P<Server>\d+),(?P<MainPort>\d+),(?P<AddPort>\d+),(?P<Session>\d+)', numeric_groups: false)
if err != null {
  abort
}

. = merge(., parsed)
.name = "JOURNAL_REG"
ts_format = "%Y-%m-%dT%H:%M:%S"
. = merge(., parse_regex!(.FilePath, r'(?P<db_uid>\w{8}\-\w{4}-\w{4}-\w{4}-\w{12})'))
.DateTime =format_timestamp!(parse_timestamp!(.DateTimeRaw, "%Y%m%d%H%M%S"), ts_format, timezone:"UTC")

found_record, err = get_enrichment_table_record("ibases",
  {
   
    "ID": .db_uid,
  }, select: ["name", "Connect_Ref"])
 
if err == null {
  .db_name = found_record.name
  .db_ref = found_record.Connect_Ref
}

